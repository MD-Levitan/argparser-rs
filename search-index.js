var searchIndex = {};
searchIndex['argparse'] = {"items":[[0,"","argparse","argparser-rs\n=========",null,null],[0,"argparser","","This module defines and contains all the important\nargument parsing functionality. The requisite types\nand functions are re-exported at the top-level of\nthe crate.",null,null],[3,"ArgParser","argparse::argparser","This type represents the state and methods for parsing arguments.\nA new parser must be created for every set of arguments you want to parse.",null,null],[3,"ArgParseResults","","This type represents the result ofparsing arguments.",null,null],[4,"ArgType","","This enum represents the different types of arguments supported",null,null],[13,"Option","","An argument that takes a value, as in `./go --pic lol.jpg`",0,null],[13,"Flag","","An argument that is a simple flag, as in `rustc --version`",0,null],[13,"List","","Like an `Option`, but takes multiple values, as in\n`./go --pics 1.png 2.png 3.png`",0,null],[13,"Dict","","Like a `List` but takes colon-split key-value pairs, as in\n`./go --pics Monday:1.jpg Tuesday:2.jpg`",0,null],[13,"Positional","","A positional argument, as in `rustc lib.rs`. The u8 indicates\nThe relative position of the position argument (i.e. `Positional(0)`\nindicates that this is the first positional argument",0,null],[5,"vec_parser","","Function that parses `List` arguments into `Vec`s.\nProvided for user convenience and use as an implementor of\n[`ArgGetter`](./trait.ArgGetter.html).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"hashmap_parser","","Function that parses `Dict` arguments into `HashMap`s.\nProvided for user convenience and use as an implementor of\n[`ArgGetter`](./trait.ArgGetter.html).\n# Panics\nPanics if improper or no separator is found (expects `key:value key2:value2...`)",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[6,"ParseResult","","Simple type alias to reduce typing. The return type of\n`ArgParser::parse`.",null,null],[8,"ArgGetter","","Represents something capable of turning a `&str` in the value\ntype of your choice. Implement this to use with `ArgParseResults::get_with`",null,null],[10,"get_arg","","This is the key function that converts from a string\nto the required value tpe",1,{"inputs":[{"name":"arggetter"},{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"argtype"},{"name":"argtype"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"argtype"},{"name":"argtype"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"argtype"}],"output":{"name":"argtype"}}],[11,"fmt","","",0,{"inputs":[{"name":"argtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"argtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"argparser"}],"output":{"name":"argparser"}}],[11,"fmt","","",2,{"inputs":[{"name":"argparser"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `ArgParser`, given the name of the program\nthat you want to be printed in help messages",2,{"inputs":[{"name":"argparser"},{"name":"string"}],"output":{"name":"argparser"}}],[11,"add_opt","","Add another option to parse.\n# Example\n```\n// add an option that is a `Flag`, with no default value, with\n// a long form of `--verbose`, short form of `v`, that is not\n// required to be passed, and has a default value of `false`",2,{"inputs":[{"name":"argparser"},{"name":"str"},{"name":"option"},{"name":"char"},{"name":"bool"},{"name":"str"},{"name":"argtype"}],"output":null}],[11,"remove_opt","","Remove an option from parsing consideration.\n# Example\n```\n// add an option that is a `Flag`, with no default value, with\n// a long form of `--verbose`, short form of `v`, that is not\n// required to be passed, and has a default value of `false`",2,{"inputs":[{"name":"argparser"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse a set of arguments, given the previous configuration\n# Example\n```\n// add an option that is a `Flag`, with no default value, with\n// a long form of `--verbose`, short form of `v`, that is not\n// required to be passed, and has a default value of `false`",2,{"inputs":[{"name":"argparser"},{"name":"i"}],"output":{"name":"parseresult"}}],[11,"help","","Prints the help message, which is constructed based on the options\nused\n# Example\n```\nuse argparse::{ArgParser, ArgType};",2,{"inputs":[{"name":"argparser"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"argparseresults"}],"output":{"name":"argparseresults"}}],[11,"fmt","","",3,{"inputs":[{"name":"argparseresults"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Extracts the argument, as long is the value type implements\n`FromStr`\n# Example\n```\nuse argparse::{ArgParser, ArgType};",3,{"inputs":[{"name":"argparseresults"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_with","","Extracts the argument, using the `ArgGetter<T>` that you provided",3,{"inputs":[{"name":"argparseresults"},{"name":"str"},{"name":"p"}],"output":{"name":"option"}}],[0,"slide","argparse","This module defines a  `Slide` iterator over `Vector`s and slices",null,null],[3,"Slide","argparse::slide","Immutable iterator that returns both an element, and slice\nrepresenting the remaining elements",null,null],[8,"Slider","","Interface for all types that can produce a `Slide` iterator",null,null],[10,"slide","","Calling this method shall produce a `Slide` iterator\n# Example\n```\nuse argparse::slide::{Slide, Slider};",4,{"inputs":[{"name":"slider"}],"output":{"name":"slide"}}],[11,"next","","",5,{"inputs":[{"name":"slide"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"slide","collections::vec","",6,{"inputs":[{"name":"vec"}],"output":{"name":"slide"}}]],"paths":[[4,"ArgType"],[8,"ArgGetter"],[3,"ArgParser"],[3,"ArgParseResults"],[8,"Slider"],[3,"Slide"],[3,"Vec"]]};
initSearch(searchIndex);
